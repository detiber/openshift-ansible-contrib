AWSTemplateFormatVersion: '2010-09-09'
Description: OpenShift Security Groups Template
Parameters:
  VPC:
    Type: "AWS::EC2::VPC::Id"
  MasterAPIPort:
    Type: Number

{%- from 'cluster.j2' import security_group, security_groups %}

Resources:
{%- for group in security_groups + ['SSH'] %}
  {{ security_group(group) }}:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'OpenShift {{ group }}s'
      VpcId: !Ref VPC
{%- endfor %}

{% macro external_ingress(destination, to_port, from_port='', identifier='') %}
{%- if from_port == '' %}{%- set from_port = to_port %}{% endif -%}
  {{ security_group(destination) ~ identifier }}Ingress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: !Ref {{ security_group(destination) }}
    Properties:
      GroupId:    !Ref {{ security_group(destination) }}
      CidrIp:     0.0.0.0/0
      ToPort:     {{ to_port }}
      FromPort:   {{ from_port }}
      IpProtocol: tcp
{%- endmacro %}

{{ external_ingress(destination='SSH',                                   to_port=22                  ) }}
{%- if openshift_aws_num_masters > 1 %}
{{ external_ingress(destination='MasterExternalELB',                     to_port='!Ref MasterAPIPort') }}
{%- endif %}
{{ external_ingress(destination='RouterELB',         identifier='HTTP',  to_port=80                  ) }}
{{ external_ingress(destination='RouterELB',         identifier='HTTPS', to_port=443                 ) }}

{%- macro internal_ingress(destination, source, to_port, from_port='', identifier='', protocol='tcp') %}
{%- if from_port == '' %}{%- set from_port = to_port %}{% endif -%}
{%- if identifier == '' %}{%- set identifier = source %}{% endif -%}
  {{ security_group(destination) ~ identifier }}Ingress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn:
      - !Ref {{ security_group(source) }}
{%- if source != destination %}
      - !Ref {{ security_group(destination) }}
{%- endif %}
    Properties:
      GroupId:               !Ref {{ security_group(destination) }}
      SourceSecurityGroupId: !Ref {{ security_group(source) }}
      ToPort:                {{ to_port }}
      FromPort:              {{ from_port }}
      IpProtocol:            {{ protocol }}
{%- endmacro %}

{{ internal_ingress(destination='ETCD',              source='Master',                                  to_port=2379                ) }}
{{ internal_ingress(destination='ETCD',              source='ETCD',                                    to_port=2380, from_port=2379) }}
{{ internal_ingress(destination='Node',              source='Master',                                  to_port=10250               ) }}
{{ internal_ingress(destination='Node',              source='Node',              identifier='Kubelet', to_port=10250               ) }}
{{ internal_ingress(destination='Node',              source='Node',              identifier='VXLAN',   to_port=4789, protocol='udp') }}
{{ internal_ingress(destination='Master',            source='Master',            identifier='API',     to_port='!Ref MasterAPIPort') }}
{{ internal_ingress(destination='Master',            source='Node',                                    to_port='!Ref MasterAPIPort') }}
{%- if openshift_aws_num_masters > 1 %}
{{ internal_ingress(destination='Master',            source='MasterInternalELB',                       to_port='!Ref MasterAPIPort') }}
{{ internal_ingress(destination='Master',            source='MasterExternalELB',                       to_port='!Ref MasterAPIPort') }}
{{ internal_ingress(destination='MasterInternalELB', source='Master',                                  to_port='!Ref MasterAPIPort') }}
{{ internal_ingress(destination='MasterInternalELB', source='Node',                                    to_port='!Ref MasterAPIPort') }}
{%- endif %}
{{ internal_ingress(destination='Router',            source='RouterELB',         identifier='HTTP',    to_port=80                  ) }}
{{ internal_ingress(destination='Router',            source='RouterELB',         identifier='HTTPS',   to_port=443                 ) }}


{%- if openshift_aws_num_masters > 1 %}
  MasterExternalELBSecurityGroupEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    DependsOn: !Ref MasterExternalELBSecurityGroup
    Properties:
      GroupId:                    !Ref MasterExternalELBSecurityGroup
      DestinationSecurityGroupId: !Ref MasterExternalELBSecurityGroup
      ToPort:                     !Ref MasterAPIPort
      FromPort:                   !Ref MasterAPIPort
      IpProtocol:                 tcp
{%- endif %}

  RouterELBSecurityGroupHTTPEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    DependsOn: !Ref RouterELBSecurityGroup
    Properties:
      GroupId:                    !Ref RouterELBSecurityGroup
      DestinationSecurityGroupId: !Ref RouterELBSecurityGroup
      ToPort:                     80
      FromPort:                   80
      IpProtocol:                 tcp
  RouterELBSecurityGroupHTTPSEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    DependsOn: !Ref RouterELBSecurityGroup
    Properties:
      GroupId:                    !Ref RouterELBSecurityGroup
      DestinationSecurityGroupId: !Ref RouterELBSecurityGroup
      ToPort:                     443
      FromPort:                   443
      IpProtocol:                 tcp

{%- if openshift_aws_num_masters > 1 %}
  MasterInternalELBSecurityGroupMasterEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    DependsOn:
      - !Ref MasterExternalELBSecurityGroup
      - !Ref MasterSecurityGroup
    Properties:
      GroupId:                    !Ref MasterExternalELBSecurityGroup
      DestinationSecurityGroupId: !Ref MasterSecurityGroup
      ToPort:                     !Ref MasterAPIPort
      FromPort:                   !Ref MasterAPIPort
      IpProtocol:                 tcp
{%- endif %}

Outputs:
  MasterSecurityGroups:
    Value:
      - !Ref MasterSecurityGroup
      - !Ref NodeSecurityGroup
      - !Ref ETCDSecurityGroup
      - !Ref SSHSecurityGroup
  NodeSecurityGroups:
    Value:
      - !Ref NodeSecurityGroup
      - !Ref SSHSecurityGroup
  ETCDSecurityGroups:
    Value:
      - !Ref ETCDSecurityGroup
      - !Ref SSHSecurityGroup
  RouterSecurityGroups:
    Value:
      - !Ref RouterSecurityGroup
      - !Ref NodeSecurityGroup
      - !Ref SSHSecurityGroup
  RouterELBSecurityGroups:
    Value:
      - !Ref RouterELBSecurityGroup
{%- if openshift_aws_num_masters > 1 %}
  MasterExternalELBSecurityGroups:
    Value:
      - !Ref MasterExternalELBSecurityGroup
  MasterInternalELBSecurityGroups:
    Value:
      - !Ref MasterInternalELBSecurityGroup
{%- endif %}